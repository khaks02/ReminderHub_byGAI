


import React, { useState } from 'react';
import { User, Mail, Phone, MapPin, MessageSquare, Edit, Package, Info } from 'lucide-react';
import { useAppContext } from '../hooks/useAppContext';
import EditReminderModal from '../components/EditReminderModal';
import { Reminder, AutoReminder, AutoReminderSource } from '../types';
import * as ReactRouterDOM from 'react-router-dom';

const { Link } = ReactRouterDOM;


const ProfileInput = ({ icon, label, value, type = "text" }: { icon: React.ReactNode; label: string; value: string; type?: string }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-400">{label}</label>
        <div className="mt-1 relative rounded-md shadow-sm">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                {icon}
            </div>
            <input 
                type={type} 
                className="focus:ring-primary focus:border-primary block w-full pl-10 sm:text-sm border-gray-300 rounded-md bg-slate-100 dark:bg-slate-700 dark:border-slate-600"
                value={value}
                disabled 
            />
        </div>
    </div>
);

const SourceIcon = ({ source }: { source: AutoReminderSource }) => {
    switch (source) {
        case 'Gmail': return <span title="Source: Gmail" className="flex-shrink-0"><Mail className="w-5 h-5 text-red-500"/></span>;
        case 'SMS': return <span title="Source: SMS" className="flex-shrink-0"><MessageSquare className="w-5 h-5 text-green-500"/></span>;
        case 'Purchase': return <span title="Source: Purchase" className="flex-shrink-0"><Package className="w-5 h-5 text-blue-500"/></span>;
        default: return null;
    }
}


const ProfilePage: React.FC = () => {
    const { reminders, autoGeneratedReminders, updateReminder, reminderTypes, addReminderType, deleteReminder, completeReminder } = useAppContext();
    const [reminderModalState, setReminderModalState] = useState<{
        isOpen: boolean;
        initialData: Partial<Reminder>;
    }>({ isOpen: false, initialData: {} });

    const handleEditReminder = (reminder: AutoReminder) => {
        setReminderModalState({ isOpen: true, initialData: reminder });
    };
    
    const handleSaveReminder = (data: Partial<Reminder>) => {
        if (data.type && !reminderTypes.some(t => t.toLowerCase() === data.type!.toLowerCase())) {
            addReminderType(data.type);
        }
        if (reminderModalState.initialData.id) {
            updateReminder(reminderModalState.initialData.id, data);
        }
        setReminderModalState({ isOpen: false, initialData: {} });
    };

    const handleDelete = (id: string) => {
        deleteReminder(id);
    };

    const handleSnooze = (id: string, days: number) => {
        const reminder = reminders.find(r => r.id === id);
        if(reminder) {
            const newDate = new Date(reminder.date);
            newDate.setDate(newDate.getDate() + days);
            updateReminder(id, { date: newDate });
        }
    };

    const handleComplete = (reminder: Reminder) => {
        // This is a simplified completion compared to DashboardPage, as there's no completion prompt modal here.
        completeReminder(reminder.id);
    };

    return (
        <div className="container mx-auto max-w-4xl">
             {reminderModalState.isOpen && (
                <EditReminderModal
                    isOpen={reminderModalState.isOpen}
                    mode='edit'
                    initialData={reminderModalState.initialData}
                    onClose={() => setReminderModalState({ ...reminderModalState, isOpen: false })}
                    onSave={handleSaveReminder}
                    onDelete={handleDelete}
                    onComplete={handleComplete}
                    onSnooze={handleSnooze}
                />
             )}
            <h1 className="text-3xl font-bold mb-2">User Profile</h1>
            <p className="text-gray-500 dark:text-gray-400 mb-8">Manage your personal information and preferences.</p>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2">
                    <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6 mb-8">
                        <h2 className="text-xl font-semibold mb-6">Personal Information</h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <ProfileInput 
                                icon={<User className="h-5 w-5 text-gray-400"/>}
                                label="Full Name"
                                value="Alex Doe"
                            />
                            <ProfileInput 
                                icon={<User className="h-5 w-5 text-gray-400"/>}
                                label="Username"
                                value="alex_doe"
                            />
                             <ProfileInput 
                                icon={<Mail className="h-5 w-5 text-gray-400"/>}
                                label="Email Address"
                                value="alex.doe@example.com"
                                type="email"
                            />
                             <ProfileInput 
                                icon={<Phone className="h-5 w-5 text-gray-400"/>}
                                label="Phone Number"
                                value="+91 98765 43210"
                                type="tel"
                            />
                        </div>
                         <div className="mt-6 text-right">
                            <button className="bg-primary text-white font-bold py-2 px-6 rounded-md hover:bg-primary-dark transition-colors">
                                Edit Profile
                            </button>
                        </div>
                    </div>
                     <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6">
                        <h2 className="text-xl font-semibold mb-6">Saved Addresses</h2>
                        <div className="space-y-4">
                             <div className="p-4 border border-gray-200 dark:border-slate-700 rounded-lg flex items-start gap-4">
                                 <MapPin className="h-6 w-6 text-primary mt-1 flex-shrink-0"/>
                                 <div>
                                    <p className="font-bold">Home</p>
                                    <p className="text-sm text-gray-600 dark:text-gray-400">42, MG Road, Bengaluru, 560001</p>
                                 </div>
                             </div>
                        </div>
                         <div className="mt-6 text-right">
                            <button className="bg-slate-200 dark:bg-slate-600 font-bold py-2 px-6 rounded-md hover:bg-slate-300 dark:hover:bg-slate-500 transition-colors">
                                Add New Address
                            </button>
                        </div>
                    </div>
                </div>

                <div className="lg:col-span-1">
                     <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6">
                        <h2 className="text-xl font-semibold mb-4">Automatically Added Reminders</h2>
                         <div className="p-3 mb-4 bg-blue-50 dark:bg-blue-900/50 text-blue-700 dark:text-blue-200 rounded-lg flex items-start gap-2 text-xs">
                             <Info size={18} className="flex-shrink-0 mt-0.5"/>
                             <span>This app can create reminders for you from purchases or connected accounts. You can edit them at any time.</span>
                         </div>

                        <div className="space-y-3">
                        {autoGeneratedReminders.map(reminder => (
                            <div key={reminder.id} className="p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg">
                                <div className="flex items-start justify-between">
                                    <div className="flex items-start gap-2">
                                        <SourceIcon source={reminder.source}/>
                                        <div>
                                            <p className="font-semibold text-sm leading-tight">{reminder.title}</p>
                                            <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{reminder.date.toLocaleDateString(undefined, { month: 'short', day: 'numeric'})}</p>
                                        </div>
                                    </div>
                                    <button onClick={() => handleEditReminder(reminder)} title="Edit Reminder" className="p-1 text-gray-500 hover:text-primary rounded-full">
                                        <Edit size={16}/>
                                    </button>
                                </div>
                            </div>
                        ))}
                        </div>
                        <div className="mt-4 text-center p-3 border-2 border-dashed border-gray-300 dark:border-slate-600 rounded-lg">
                             <p className="text-sm text-gray-600 dark:text-gray-400">Get smarter reminders by connecting more sources.</p>
                             <Link to="/settings" className="text-sm font-bold text-primary hover:underline mt-1 inline-block">
                                Connect Accounts
                             </Link>
                         </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProfilePage;