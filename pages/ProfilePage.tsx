
import React, { useState } from 'react';
import { User, Mail, Phone, MapPin, MessageSquare, Edit, Package, Info, Heart, Utensils, LogOut } from 'lucide-react';
import { useAppContext } from '../hooks/useAppContext';
import { useAuth } from '../hooks/useAuthContext';
import EditReminderModal from '../components/EditReminderModal';
import { Reminder, AutoReminder, AutoReminderSource, Recipe } from '../types';
// FIX: Switched to a namespace import for react-router-dom to resolve module resolution errors.
import * as ReactRouterDOM from 'react-router-dom';
import RecipeCard from '../components/RecipeCard';
import Modal from '../components/Modal';
import Spinner from '../components/Spinner';




const ProfileInput = ({ icon, label, value, type = "text" }: { icon: React.ReactNode; label: string; value: string; type?: string }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-400">{label}</label>
        <div className="mt-1 relative rounded-md shadow-sm">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                {icon}
            </div>
            <input 
                type={type} 
                className="focus:ring-primary focus:border-primary block w-full pl-10 sm:text-sm border-gray-300 rounded-md bg-slate-100 dark:bg-slate-700 dark:border-slate-600"
                value={value}
                disabled 
            />
        </div>
    </div>
);

const SourceIcon = ({ source }: { source: AutoReminderSource }) => {
    switch (source) {
        case 'Gmail': return <span title="Source: Gmail" className="flex-shrink-0"><Mail className="w-5 h-5 text-red-500"/></span>;
        case 'SMS': return <span title="Source: SMS" className="flex-shrink-0"><MessageSquare className="w-5 h-5 text-green-500"/></span>;
        case 'Purchase': return <span title="Source: Purchase" className="flex-shrink-0"><Package className="w-5 h-5 text-blue-500"/></span>;
        default: return null;
    }
}


const ProfilePage: React.FC = () => {
    const { reminders, autoGeneratedReminders, updateReminder, reminderTypes, addReminderType, deleteReminder, completeReminder, savedRecipes, unsaveRecipe } = useAppContext();
    const { currentUser, logout, uploadAvatar } = useAuth();
    const navigate = ReactRouterDOM.useNavigate();
    
    const [isUploading, setIsUploading] = useState(false);
    const [uploadError, setUploadError] = useState<string | null>(null);

    const [reminderModalState, setReminderModalState] = useState<{
        isOpen: boolean;
        initialData: Partial<Reminder>;
    }>({ isOpen: false, initialData: {} });
    
    const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            setIsUploading(true);
            setUploadError(null);
            try {
                await uploadAvatar(file);
            } catch (err) {
                setUploadError(err instanceof Error ? err.message : "Upload failed.");
            } finally {
                setIsUploading(false);
            }
        }
    };

    const handleSelectRecipe = (recipe: Recipe) => {
        navigate('/recipes');
    };

    const handleToggleSave = (recipe: Recipe) => {
        unsaveRecipe(recipe.id);
    };
    
    const handleShowVendors = () => {
        alert("Vendor search can be initiated from the main Recipes page.");
    };

    const handleEditReminder = (reminder: AutoReminder) => {
        setReminderModalState({ isOpen: true, initialData: reminder });
    };
    
    const handleSaveReminder = async (data: Partial<Reminder>) => {
        if (data.type && !reminderTypes.some(t => t.toLowerCase() === data.type!.toLowerCase())) {
            addReminderType(data.type);
        }
        if (reminderModalState.initialData.id) {
            await updateReminder(reminderModalState.initialData.id, data);
        }
        setReminderModalState({ isOpen: false, initialData: {} });
    };

    const handleDelete = (id: string) => {
        deleteReminder(id);
    };

    const handleSnooze = async (id: string, days: number) => {
        const reminder = reminders.find(r => r.id === id);
        if(reminder) {
            const newDate = new Date(reminder.date);
            newDate.setDate(newDate.getDate() + days);
            await updateReminder(id, { date: newDate });
        }
    };

    const handleComplete = (reminder: Reminder) => {
        completeReminder(reminder.id);
    };

    const handleLogout = async () => {
        await logout();
        navigate('/admin-login');
    };

    return (
        <div className="container mx-auto max-w-6xl p-4 md:p-8 pb-24 md:pb-8">
             {reminderModalState.isOpen && (
                <EditReminderModal
                    isOpen={reminderModalState.isOpen}
                    mode='edit'
                    initialData={reminderModalState.initialData}
                    onClose={() => setReminderModalState({ ...reminderModalState, isOpen: false })}
                    onSave={handleSaveReminder}
                    onDelete={handleDelete}
                    onComplete={handleComplete}
                    onSnooze={handleSnooze}
                />
             )}
            <h1 className="text-3xl font-bold mb-2">User Profile</h1>
            <p className="text-gray-500 dark:text-gray-400 mb-8">Manage your personal information and preferences.</p>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2 space-y-8">
                    <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6 card-lift">
                        <div className="flex justify-between items-start mb-6">
                            <h2 className="text-xl font-semibold">Personal Information</h2>
                            <button 
                                onClick={handleLogout}
                                className="flex items-center gap-2 bg-red-500 text-white font-bold py-2 px-4 rounded-md hover:bg-red-600 transition-colors text-sm"
                            >
                                <LogOut size={16}/> Logout
                            </button>
                        </div>
                        <div className="flex flex-col items-center text-center md:flex-row md:text-left gap-6">
                             <div className="relative flex-shrink-0">
                                <img 
                                    src={currentUser?.avatarUrl || `https://api.dicebear.com/8.x/initials/svg?seed=${encodeURIComponent(currentUser?.name || 'User')}`} 
                                    alt="User Avatar"
                                    className="w-24 h-24 rounded-full object-cover ring-4 ring-offset-2 ring-primary dark:ring-offset-slate-800"
                                />
                                <label htmlFor="avatar-upload" className="absolute -bottom-1 -right-1 bg-primary text-white p-1.5 rounded-full cursor-pointer hover:bg-primary-dark transition-colors" title="Change profile picture">
                                    {isUploading ? <div className="w-4 h-4"><Spinner size="4" /></div> : <Edit size={16} />}
                                </label>
                                <input id="avatar-upload" type="file" className="hidden" accept="image/*" onChange={handleAvatarUpload} disabled={isUploading} />
                            </div>
                            <div className="grid grid-cols-1 gap-6 flex-grow w-full">
                                <ProfileInput icon={<User className="h-5 w-5 text-gray-400"/>} label="Full Name" value={currentUser?.name || "User"} />
                                <ProfileInput icon={<Mail className="h-5 w-5 text-gray-400"/>} label="Email Address" value={currentUser?.email || "user@example.com"} type="email"/>
                            </div>
                        </div>
                         {uploadError && <p className="text-red-500 text-sm mt-4 text-center">{uploadError}</p>}
                    </div>
                     <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6 card-lift">
                        <h2 className="text-xl font-semibold mb-6">Saved Addresses</h2>
                        <div className="space-y-4">
                             <div className="p-4 border border-gray-200 dark:border-slate-700 rounded-lg flex items-start gap-4">
                                 <MapPin className="h-6 w-6 text-primary mt-1 flex-shrink-0"/>
                                 <div>
                                    <p className="font-bold">Home</p>
                                    <p className="text-sm text-gray-600 dark:text-gray-400">42, MG Road, Bengaluru, 560001</p>
                                 </div>
                             </div>
                        </div>
                         <div className="mt-6 text-right">
                            <button className="bg-slate-200 dark:bg-slate-600 font-bold py-2 px-6 rounded-md hover:bg-slate-300 dark:hover:bg-slate-500 transition-colors">Add New Address</button>
                        </div>
                    </div>

                    <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6 card-lift">
                         <h2 className="text-xl font-semibold mb-4">My Saved Recipes</h2>
                         {savedRecipes.length > 0 ? (
                            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                                {savedRecipes.map(recipe => (
                                    <RecipeCard 
                                        key={recipe.id}
                                        recipe={recipe}
                                        onSelect={handleSelectRecipe}
                                        onToggleSave={handleToggleSave}
                                        isSaved={true} // Always saved on this page
                                        onShowVendors={handleShowVendors}
                                    />
                                ))}
                            </div>
                         ) : (
                            <div className="text-center py-10 px-6 border-2 border-dashed border-gray-200 dark:border-slate-700 rounded-lg">
                                <Heart size={40} className="mx-auto text-gray-400 dark:text-gray-500 mb-4" />
                                <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300">No Saved Recipes Yet</h3>
                                <p className="text-gray-500 dark:text-gray-400 mt-2">Explore our recipes and save your favorites to see them here!</p>
                                <button onClick={() => navigate('/recipes')} className="mt-4 inline-flex items-center gap-2 bg-primary text-white font-bold py-2 px-5 rounded-md hover:bg-primary-dark transition-colors">
                                    <Utensils size={18}/>
                                    Find Recipes
                                </button>
                            </div>
                         )}
                    </div>

                </div>

                <div className="lg:col-span-1">
                     <div className="bg-white dark:bg-slate-800 rounded-lg shadow-sm p-6 card-lift">
                        <h2 className="text-xl font-semibold mb-4">Automatically Added Reminders</h2>
                         <div className="p-3 mb-4 bg-blue-50 dark:bg-blue-900/50 text-blue-700 dark:text-blue-200 rounded-lg flex items-start gap-2 text-xs">
                             <Info size={18} className="flex-shrink-0 mt-0.5"/>
                             <span>This app can create reminders for you from purchases or connected accounts. You can edit them at any time.</span>
                         </div>

                        <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                        {autoGeneratedReminders.length > 0 ? autoGeneratedReminders.map(reminder => (
                            <div key={reminder.id} className="p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg">
                                <div className="flex items-start justify-between">
                                    <div className="flex items-start gap-2">
                                        <SourceIcon source={reminder.source}/>
                                        <div>
                                            <p className="font-semibold text-sm leading-tight">{reminder.title}</p>
                                            <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{reminder.date.toLocaleDateString(undefined, { month: 'short', day: 'numeric'})}</p>
                                        </div>
                                    </div>
                                    <button onClick={() => handleEditReminder(reminder)} title="Edit Reminder" className="p-1 text-gray-500 hover:text-primary rounded-full">
                                        <Edit size={16}/>
                                    </button>
                                </div>
                            </div>
                        )) : <p className="text-center text-sm text-gray-500 py-4">No auto-generated reminders yet.</p>}
                        </div>
                        <div className="mt-4 text-center p-3 border-2 border-dashed border-gray-300 dark:border-slate-600 rounded-lg">
                             <p className="text-sm text-gray-600 dark:text-gray-400">Get smarter reminders by connecting more sources.</p>
                             <ReactRouterDOM.Link to="/settings" className="text-sm font-bold text-primary hover:underline mt-1 inline-block">
                                Connect Accounts
                             </ReactRouterDOM.Link>
                         </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProfilePage;