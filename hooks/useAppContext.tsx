
import React, { createContext, useState, useContext, ReactNode, useEffect, useMemo } from 'react';
import { Reminder, Service, CartItem, AppContextType, CartItemType, ServiceCartItem, PreparedDishCartItem, Recipe, ReminderType, RecurrenceRule, Order, VendorProductCartItem, AutoReminder } from '../types';
import { INITIAL_REMINDERS, INITIAL_REMINDER_TYPES, INITIAL_AUTO_REMINDERS } from '../constants';
import { scheduleNotificationsForReminder, cancelNotificationsForReminder, requestNotificationPermission } from '../services/notificationService';
import { extractFollowUpReminder } from '../services/geminiService';
import { useAuth } from './useAuthContext';

const AppContext = createContext<AppContextType | undefined>(undefined);

export const useAppContext = () => {
    const context = useContext(AppContext);
    if (context === undefined) {
        throw new Error('useAppContext must be used within an AppProvider');
    }
    return context;
};

const calculateNextOccurrence = (currentDate: Date, rule: RecurrenceRule): Date => {
    const newDate = new Date(currentDate);
    const { frequency, interval } = rule;
    switch (frequency) {
        case 'DAILY': newDate.setDate(newDate.getDate() + interval); break;
        case 'WEEKLY': newDate.setDate(newDate.getDate() + 7 * interval); break;
        case 'MONTHLY': newDate.setMonth(newDate.getMonth() + interval); break;
        case 'YEARLY': newDate.setFullYear(newDate.getFullYear() + interval); break;
    }
    return newDate;
};

const loadFromStorage = <T,>(key: string, defaultValue: T): T => {
    try {
        const storedValue = localStorage.getItem(key);
        if (!storedValue) return defaultValue;

        const parsed = JSON.parse(storedValue);

        if ((key.startsWith('reminders') || key.startsWith('orders')) && Array.isArray(parsed)) {
             // Revive date objects from ISO strings for reminders and orders
            return parsed.map((item: any) => ({
                ...item,
                date: new Date(item.date),
                 // Also revive follow-up reminder dates inside orders
                followUpReminders: item.followUpReminders?.map((fu: any) => ({...fu, date: new Date(fu.date)}))
            })) as T;
        }

        return parsed as T;
    } catch (error) {
        console.error(`Error loading ${key} from localStorage`, error);
        return defaultValue;
    }
};

const saveToStorage = <T,>(key: string, value: T) => {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
        console.error(`Error saving ${key} to localStorage`, error);
    }
};

const getInitialReminders = () => [...INITIAL_REMINDERS, ...INITIAL_AUTO_REMINDERS].sort((a, b) => a.date.getTime() - b.date.getTime());

export const AppProvider = ({ children }: { children: ReactNode }) => {
    const { currentUser } = useAuth();
    const userId = currentUser?.id;

    // State is now initialized lazily and will be updated based on user login
    const [reminders, setReminders] = useState<Reminder[]>([]);
    const [cart, setCart] = useState<CartItem[]>([]);
    const [reminderTypes, setReminderTypes] = useState<ReminderType[]>([]);
    const [orders, setOrders] = useState<Order[]>([]);
    const [savedRecipes, setSavedRecipes] = useState<Recipe[]>([]);

    // Effect to load user data on login or reset on logout
    useEffect(() => {
        if (userId) {
            setReminders(loadFromStorage(`reminders_${userId}`, getInitialReminders()));
            setCart(loadFromStorage(`cart_${userId}`, []));
            setReminderTypes(loadFromStorage(`reminderTypes_${userId}`, INITIAL_REMINDER_TYPES));
            setOrders(loadFromStorage(`orders_${userId}`, []));
            setSavedRecipes(loadFromStorage(`savedRecipes_${userId}`, []));
        } else {
            // Reset state on logout
            setReminders([]);
            setCart([]);
            setReminderTypes([]);
            setOrders([]);
            setSavedRecipes([]);
        }
    }, [userId]);
    
    // Effects to save data to localStorage when it changes, using user-specific keys
    useEffect(() => { if (userId) saveToStorage(`reminders_${userId}`, reminders); }, [reminders, userId]);
    useEffect(() => { if (userId) saveToStorage(`cart_${userId}`, cart); }, [cart, userId]);
    useEffect(() => { if (userId) saveToStorage(`reminderTypes_${userId}`, reminderTypes); }, [reminderTypes, userId]);
    useEffect(() => { if (userId) saveToStorage(`orders_${userId}`, orders); }, [orders, userId]);
    useEffect(() => { if (userId) saveToStorage(`savedRecipes_${userId}`, savedRecipes); }, [savedRecipes, userId]);


    const autoGeneratedReminders = useMemo(() => 
        reminders.filter((r): r is AutoReminder => !!r.source), 
        [reminders]
    );

    useEffect(() => {
        requestNotificationPermission();
        reminders.forEach(scheduleNotificationsForReminder);
        // Clean up notifications for reminders that no longer exist
        return () => {
            reminders.forEach(r => cancelNotificationsForReminder(r.id));
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [reminders]); // Rerun only when the whole reminders array changes


    const addReminder = (reminder: Reminder) => {
        setReminders(prev => {
            const newReminders = [reminder, ...prev].sort((a, b) => a.date.getTime() - b.date.getTime());
            scheduleNotificationsForReminder(reminder);
            return newReminders;
        });
    };

    const deleteReminder = (id: string) => {
        setReminders(prev => prev.filter(r => r.id !== id));
        cancelNotificationsForReminder(id);
    };

    const updateReminder = (id: string, updates: Partial<Reminder>) => {
        setReminders(prev => {
             const updatedReminders = prev.map(r => r.id === id ? { ...r, ...updates } : r).sort((a,b) => a.date.getTime() - b.date.getTime());
             const updatedReminder = updatedReminders.find(r => r.id === id);
             if (updatedReminder) {
                scheduleNotificationsForReminder(updatedReminder);
            }
            return updatedReminders;
        });
    };

    const completeReminder = (id: string) => {
        const reminder = reminders.find(r => r.id === id);
        if (!reminder) return;

        cancelNotificationsForReminder(id); // Always cancel old notifications

        if (reminder.recurrenceRule) {
            const newDate = calculateNextOccurrence(reminder.date, reminder.recurrenceRule);
            // updateReminder will handle rescheduling the new notifications
            updateReminder(id, { date: newDate });
        } else {
            // isCompleted state will prevent notifications from being scheduled
            updateReminder(id, { isCompleted: true });
        }
    };

    const addReminderType = (newType: ReminderType) => {
        setReminderTypes(prev => {
            const upperCasePrev = prev.map(t => t.toUpperCase().trim());
            const upperCaseNew = newType.toUpperCase().trim();
            if (upperCaseNew && !upperCasePrev.includes(upperCaseNew)) {
                return [...prev, newType.trim()].sort();
            }
            return prev;
        });
    };
    
    const addHolidaysBatch = (holidays: { holidayName: string, date: string }[], country: string) => {
        const newReminders: Reminder[] = [];
        holidays.forEach(holiday => {
            const holidayDate = new Date(`${holiday.date}T12:00:00`); 
            const reminderExists = reminders.some(r => 
                r.title.toLowerCase() === holiday.holidayName.toLowerCase() && 
                r.date.toDateString() === holidayDate.toDateString()
            );

            if (!reminderExists) {
                const newReminder: Reminder = {
                    id: `rem-holiday-${Date.now()}-${Math.random()}`,
                    title: holiday.holidayName,
                    date: holidayDate,
                    type: 'Holiday',
                    description: `Public holiday in ${country}.`,
                    isCompleted: false,
                };
                newReminders.push(newReminder);
            }
        });

        if (newReminders.length > 0) {
            setReminders(prev => {
                const updatedReminders = [...prev, ...newReminders].sort((a, b) => a.date.getTime() - b.date.getTime());
                newReminders.forEach(scheduleNotificationsForReminder);
                return updatedReminders;
            });
        }
        return newReminders.length;
    };


    const addToCart = (itemToAdd: Service | CartItem) => {
        setCart(prevCart => {
            if ('provider' in itemToAdd) { 
                 const existingItem = prevCart.find(item => item.type === CartItemType.SERVICE && item.item.id === itemToAdd.id) as ServiceCartItem | undefined;
                if (existingItem) {
                    return prevCart.map(item => item.id === existingItem.id ? { ...item, quantity: (item as ServiceCartItem).quantity + 1 } : item);
                }
                const newCartItem: ServiceCartItem = {
                    id: `cart-${Date.now()}`,
                    type: CartItemType.SERVICE,
                    item: itemToAdd,
                    quantity: 1
                };
                return [...prevCart, newCartItem];
            }
            
            const newItem = itemToAdd as CartItem;

            if (newItem.type === CartItemType.PREPARED_DISH) {
                const existingDish = prevCart.find(item => item.type === CartItemType.PREPARED_DISH && item.recipe.id === newItem.recipe.id) as PreparedDishCartItem | undefined;
                if (existingDish) {
                     return prevCart.map(item => item.id === existingDish.id ? { ...item, quantity: (item as PreparedDishCartItem).quantity + 1 } : item);
                }
            }

            if (newItem.type === CartItemType.VENDOR_PRODUCT) {
                const existingVp = prevCart.find(item => item.type === CartItemType.VENDOR_PRODUCT && item.productName === newItem.productName && item.vendor === newItem.vendor) as VendorProductCartItem | undefined;
                if (existingVp) {
                    return prevCart.map(item => item.id === existingVp.id ? { ...item, quantity: (item as VendorProductCartItem).quantity + 1 } : item);
                }
            }
            
            const isDuplicate = prevCart.some(item => 
                (item.type === CartItemType.INGREDIENTS_LIST && newItem.type === CartItemType.INGREDIENTS_LIST && item.recipe.id === newItem.recipe.id) ||
                (item.type === CartItemType.CHEF_SERVICE && newItem.type === CartItemType.CHEF_SERVICE && item.recipe.id === newItem.recipe.id)
            );

            if(isDuplicate) {
                console.log("Item already in cart");
                return prevCart;
            }

            return [...prevCart, newItem];
        });
    };

    const removeFromCart = (itemId: string) => {
        setCart(prev => prev.filter(item => item.id !== itemId));
    };

    const updateCartItem = (itemId: string, updates: Partial<CartItem>) => {
        setCart(prev => prev.map(item => item.id === itemId ? { ...item, ...updates } as CartItem : item));
    };


    const clearCart = () => {
        setCart([]);
    };
    
    const cartCount = cart.reduce((count, item) => {
        return count + (('quantity' in item && typeof item.quantity === 'number') ? item.quantity : 1);
    }, 0);

    const getItemNameForOrder = (item: CartItem): string => {
         switch (item.type) {
            case CartItemType.SERVICE: return item.item.name;
            case CartItemType.PREPARED_DISH: return item.recipe.name;
            case CartItemType.INGREDIENTS_LIST: return `Ingredients for ${item.recipe.name}`;
            case CartItemType.CHEF_SERVICE: return `Chef for ${item.recipe.name}`;
            case CartItemType.VENDOR_PRODUCT: return item.productName;
            default: return "Unknown Item";
        }
    }

    const analyzeOrderForFollowUps = async (order: Order) => {
        const followUpPromises = order.items.map(item => 
            extractFollowUpReminder(getItemNameForOrder(item), order.date)
        );
        const results = await Promise.all(followUpPromises);
        const validFollowUps = results.filter(Boolean);

        if (validFollowUps.length > 0) {
            validFollowUps.forEach(followUp => {
                if (followUp) {
                    const newReminder: Reminder = {
                        id: `rem-auto-${Date.now()}-${Math.random()}`,
                        title: followUp.title,
                        date: followUp.date,
                        type: 'Renewal',
                        description: `Automatically added from order #${order.id.slice(-6)}`,
                        isCompleted: false,
                        source: 'Purchase',
                    };
                    addReminder(newReminder);
                }
            });

            setOrders(prevOrders => prevOrders.map(o => 
                o.id === order.id ? { ...o, followUpReminders: validFollowUps.filter(f => f !== null) as any[] } : o
            ));
        }
    };


    const checkout = () => {
        if (cart.length === 0) return;
        const total = cart.reduce((acc, item) => {
            let itemPrice = 0;
            switch (item.type) {
                case CartItemType.SERVICE: itemPrice = item.item.price * item.quantity; break;
                case CartItemType.PREPARED_DISH: itemPrice = item.recipe.price * item.quantity; break;
                case CartItemType.CHEF_SERVICE: itemPrice = item.price; break;
                case CartItemType.VENDOR_PRODUCT: itemPrice = item.price * item.quantity; break;
            }
            return acc + itemPrice;
        }, 0);

        const firstItemWithReminder = cart.find(item => item.reminderId && item.reminderTitle);

        const newOrder: Order = {
            id: `order-${Date.now()}`,
            date: new Date(),
            items: cart,
            total,
            reminderId: firstItemWithReminder?.reminderId,
            reminderTitle: firstItemWithReminder?.reminderTitle,
        };
        setOrders(prev => [newOrder, ...prev]);
        clearCart();
        analyzeOrderForFollowUps(newOrder);
    };
    
    const saveRecipe = (recipe: Recipe) => {
        setSavedRecipes(prev => {
            if (prev.some(r => r.id === recipe.id)) {
                return prev;
            }
            return [recipe, ...prev];
        });
    };

    const unsaveRecipe = (recipeId: string) => {
        setSavedRecipes(prev => prev.filter(r => r.id !== recipeId));
    };

    const value: AppContextType = {
        reminders,
        addReminder,
        deleteReminder,
        updateReminder,
        completeReminder,
        reminderTypes,
        addReminderType,
        addHolidaysBatch,
        cart,
        cartCount,
        addToCart,
        removeFromCart,
        clearCart,
        updateCartItem,
        orders,
        checkout,
        autoGeneratedReminders,
        savedRecipes,
        saveRecipe,
        unsaveRecipe,
    };

    return (
        <AppContext.Provider value={value}>
            {children}
        </AppContext.Provider>
    );
};
