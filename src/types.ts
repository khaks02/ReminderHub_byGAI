export interface User {
    id: string;
    name: string;
    email: string;
    avatarUrl?: string;
    identities?: { provider: string;[key: string]: any }[];
}

export interface UserPreferences {
    user_id: string;
    recipe_vegetarian_only: boolean;
    notification_settings?: any;
    has_completed_tutorial?: boolean;
}

export type ReminderType = string;

export interface RecurrenceRule {
    frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY';
    interval: number;
}

export type AutoReminderSource = 'Gmail' | 'SMS' | 'WhatsApp' | 'Purchase';

export interface Reminder {
    id: string;
    user_id?: string; // For Supabase FK
    title: string;
    date: Date;
    type: ReminderType;
    description: string;
    recurrence_rule?: RecurrenceRule | null;
    is_completed?: boolean;
    source?: AutoReminderSource;
}

export interface AutoReminder extends Reminder {
    source: AutoReminderSource;
}

export interface VendorSuggestion {
    name: string;
    description: string;
    priceRange: string; // "â‚¹100-1000"
    rating: number;
    productQuery: string; // e.g., "smartwatch"
    customerCare?: string;
}

export interface ActivityRecommendation {
    activity: string; // e.g., "Buy a Gift"
    vendors: VendorSuggestion[];
}


export interface Recipe {
    id: string;
    name: string;
    description: string;
    ingredients: string[];
    instructions: string[];
    imageUrl?: string;
    isVeg: boolean;
    cuisine: string;
    rating: number;
    cookTimeInMinutes: number;
    servings: number;
    price: number;
    deliveryVendors: string[];
    groceryVendors: string[];
    difficulty: string; // e.g., "Easy", "Medium", "Hard"
    calories: number; // e.g., 450
}

export interface DailyRecommendationResponse {
    theme: string;
    breakfast: Recipe[];
    lunch: Recipe[];
    hitea: Recipe[];
    dinner: Recipe[];
    all_time_snacks: Recipe[];
}

export enum CartItemType {
    PREPARED_DISH = 'PREPARED_DISH',
    INGREDIENTS_LIST = 'INGREDIENTS_LIST',
    CHEF_SERVICE = 'CHEF_SERVICE',
    VENDOR_PRODUCT = 'VENDOR_PRODUCT',
}

interface CartItemBase {
    id: string; // Unique ID for each cart entry
    type: CartItemType;
    reminderId?: string;
    reminderTitle?: string;
}

export interface PreparedDishCartItem extends CartItemBase {
    type: CartItemType.PREPARED_DISH;
    recipe: Recipe;
    quantity: number;
    vendor?: string;
}

export interface IngredientsCartItem extends CartItemBase {
    type: CartItemType.INGREDIENTS_LIST;
    recipe: Recipe;
    vendor?: string;
}

export interface ChefServiceCartItem extends CartItemBase {
    type: CartItemType.CHEF_SERVICE;
    recipe: Recipe;
    price: number; // Chef services have a fixed price
}

export interface VendorProductCartItem extends CartItemBase {
    type: CartItemType.VENDOR_PRODUCT;
    productName: string;
    vendor: string;
    price: number;
    quantity: number;
    imageUrl?: string;
    customerCare?: string;
}


export type CartItem = PreparedDishCartItem | IngredientsCartItem | ChefServiceCartItem | VendorProductCartItem;

export interface FollowUpReminder {
    title: string;
    date: Date;
}

export interface Order {
    id: string;
    user_id?: string; // For Supabase FK
    date: Date;
    items: CartItem[];
    total: number;
    reminderId?: string;
    reminderTitle?: string;
    followUpReminders?: FollowUpReminder[];
}

export type AppContextType = {
    reminders: Reminder[];
    addReminder: (reminder: Omit<Reminder, 'id' | 'user_id'>) => Promise<void>;
    deleteReminder: (id: string) => void;
    updateReminder: (id: string, updates: Partial<Reminder>) => Promise<void>;
    completeReminder: (id: string) => void;
    reminderTypes: ReminderType[];
    addReminderType: (type: ReminderType) => void;
    cart: CartItem[];
    cartCount: number;
    addToCart: (item: CartItem) => void;
    removeFromCart: (itemId: string) => void;
    clearCart: () => void;
    updateCartItem: (itemId: string, updates: Partial<CartItem>) => void;
    orders: Order[];
    checkout: () => void;
    autoGeneratedReminders: AutoReminder[];
    addHolidaysBatch: (holidays: { holidayName: string; date: string }[], country: string) => Promise<number>;
    savedRecipes: Recipe[];
    saveRecipe: (recipe: Recipe) => void;
    unsaveRecipe: (recipeId: string) => void;
    preferences: UserPreferences | null;
    updatePreferences: (updates: Partial<Omit<UserPreferences, 'user_id'>>) => Promise<void>;
    completeOnboarding: () => Promise<void>;
};

export type AuthContextType = {
    currentUser: User | null;
    loading: boolean;
    login: (method: 'email' | 'google' | 'facebook', credentials?: { email?: string; password?: string }) => Promise<void | User>;
    signup: (credentials: { email?: string; password?: string, fullName?: string; }) => Promise<User | null | undefined>;
    logout: () => void;
    uploadAvatar: (file: File) => Promise<void>;
    linkAccount: (provider: 'google') => Promise<void>;
    unlinkAccount: (provider: 'google') => Promise<void>;
};